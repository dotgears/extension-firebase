

data="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6Imh0dHBzOlwvXC93d3cuZ29vZ2xlYXBpcy5jb21cL2F1dGhcL2ZpcmViYXNlIiwiaWF0IjoxNjAxMDMyOTE5LCJpc3MiOiJmaXJlYmFzZS1hZG1pbnNkay15cnFkdUBib29sLThiYTZkLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwiYXVkIjoiaHR0cHM6XC9cL3d3dy5nb29nbGVhcGlzLmNvbVwvb2F1dGgyXC92NFwvdG9rZW4iLCJleHAiOjE2MDEwMzI5Nzl9
"

private_key = "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCt+C0DS/Irf6rh\nxRecvoB5sM+JH0GyUEAoDuC6tfhueR59tI8Le7GR4wj1gK7hb+ukVBP6QNZhhnDs\ns2DrC1PCuQ71zsKeFUJ1rFrRZr6fZDwEa4+SwqiKpUG2wfuNqQccIpd0I5RwcZGS\noIzUjo/KZwfu3KCpAHkyrn2E+EX6zZJg56oiXINgehp3bJtwMgSEwh6gK9/CBR2s\nHIxz0bucDFH5Ae2+FMXQHqHSzbl6ybyC8NCKfPXgUNDSOl1lyWFi3+E19FSe8v9S\nv5eNdvdjcPxIEqd/3DubjXRC7dwXTaMepRXjGawivViISpLMgOLE3TKnj/KSJDmD\nVePlXd2nAgMBAAECggEAEHYkNQrzXAglQ5GMD1Uu85TcwAuSaPMgBv2Im6vXv9Hu\nv5O3JcdRp5piJ1Z19dExBnUjbzHCBCtqm9mWlgpJDDfJNLT/HfwPNFkXpN3bs40s\nAq0QDyG9PS7i93SgJXW1I9JM63y1/ifSgwHb7mPPZll2dJsxPQMIjnILxx1cN2pW\nGLbJ+STFy9h5IKddGhEieAK3OAiLSv963buIXiMAG/bQDIDsC9TMDf7zbsQ2qV6O\nU/B4dUnRUtNCE+cKxTSke+SqtYyLrolGuLNT3MTcogoO5a/Ag+tswr200M8c+vKF\nVVEzcpANqfpwxZkgfnJDzzj9399Fnc5k7+F2bnvWPQKBgQDhTuvI+hRluAhHEusH\nkvdWI5jxAgUQWBFbFD9T11V3z2rYEmrLMbfvQnq71flE8cz4pTVPaspkrnDmGnYP\nBo/G1jDaDOZj19AodmzXPoNwVszrA74n3kix21Q/Go0cVpD7Tnl5oYjPZqPEAlvL\n+Rsr440nOPPzc03+Hr/JB+WKfQKBgQDFqu/sxL7egjgVAjotvHdyQUrDhIq/dww/\n+S+LhtnbUz26DDL82g+rvYfmZUVG38kUoCtNsmJ54qsVn53BGqjmRnDbkPdmRCjL\nOnn4Zu5I4Q9pIQQFFnOJj/h/DSBv0APmdN7S5NbFippfbeHPd5Wfoos55nPGvBc1\nIrnAS5xd8wKBgCf/DJhG3KwZ+U40q4hSrJmcBCB0jVWTbLFQbNWDWmbEaWEmE9My\nZkaQ9Jy3pWJ50jspiMcqW/d3iA8xD1gngAp6J33t4FBFFWy5aSTksgyVPBdUOMN3\nEEySdOgm3Hn1XBNgoOvYoyK+Q8Ad8xHIjOxDnuEhmRzUkTnVV5JmVnc5AoGBALtI\ngFZm+yk7XAObvp/C57FbZ4jkNcm+895RLNkYBaYmsl9qW4zy1tIzm2WSIhdKxOxD\n7YOKNn+hYdP1DbT+m3TC3P9L1PwSLEyRtSrD65UlmEJVQ8fGQ+XcgOdv+oG2J1vc\n85oBs/QqpKUyKTc26I79pMhRLvTnFV4E7tXhTeA9AoGAeR1/TNCy2RmaNzg295nD\nl4RF8l4lP2YOdxY3IklpbfRjBYpSGb2bGHJihDtfTZvRuUj6zC8V0eZWZoZbdMt+\nIaoEdeskmt94IrEUfRVMVCALYqFvMvSGku+u2uy28vccUZzwIGmcjs9Qh9qMSQwH\ndmLAcbuRAM38CTroxUsra38=\n-----END PRIVATE KEY-----\n"



require "base64url"
require "openssl"
# require ""

pkey = OpenSSL::PKey::RSA.new(private_key)

signature = pkey.sign_pss("SHA256", data, salt_length: :max, mgf1_hash: "SHA256")
encoded = Base64URL.encode(signature)

jwt = data + "." + encoded

print jwt